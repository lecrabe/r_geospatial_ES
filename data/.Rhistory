####### Comprimir el resultado
system(sprintf("gdal_calc.py -A %s -B %s --outfile=%s --co=\"COMPRESS=LZW\" --calc=\"%s\"",
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"tmp_bioko_classificacion_clump_gt_50.tif"),
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
"(B>0)*A"
)
)
####### Reproject in Albers
system(sprintf("gdalwarp -t_srs %s -ot Byte -overwrite -co COMPRESS=LZW %s %s",
"albers_equal_area_projection.txt",
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
paste0(rootdir,"aea_bioko_clump_mix_reclass_20170726.tif")
)
)
dbf1$new_perd  <- 1
dbf1[
rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 2
dbf1[
rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 3
# dbf1[rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 4
# dbf1[rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 5
dbf1[
rowSums(dbf1[,codes_nobosq]) > 0.9*dbf1$total
,]$new_perd <- 6
dbf1[
dbf1[,codes_agua] > 0.9*dbf1$total
,]$new_perd <- 7
dbf1$combi <- dbf1$new_perd*10+dbf1$new_class
table(dbf1$combi)
write.table(dbf1[,c("clump_id","total","combi")],paste0(rootdir,"bioko_reclass.txt"),row.names = F,col.names = F)
####### Reclassificar la masquera
system(sprintf("(echo %s; echo 1; echo 1; echo 3; echo 0) | oft-reclass  -oi %s  -um %s %s",
paste0(rootdir,"bioko_reclass.txt"),
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"bioko_clump_mix.tif"),
paste0(rootdir,"bioko_clump_mix.tif")
))
####### Comprimir el resultado
system(sprintf("gdal_calc.py -A %s -B %s --outfile=%s --co=\"COMPRESS=LZW\" --calc=\"%s\"",
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"tmp_bioko_classificacion_clump_gt_50.tif"),
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
"(B>0)*A"
)
)
####### Reproject in Albers
system(sprintf("gdalwarp -t_srs %s -ot Byte -overwrite -co COMPRESS=LZW %s %s",
"albers_equal_area_projection.txt",
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
paste0(rootdir,"aea_bioko_clump_mix_reclass_20170726.tif")
)
)
####### Limpiar la carpeta de los "tmp"
# system(sprintf("rm %s",
#                 "tmp*.tif"))
####### Tiempo de processamiento
Sys.time()-start_time
dbf1$new_perd  <- 0
dbf1[
rowSums(dbf1[,codes_bosque]) > 0.3*dbf1$total
,]$new_perd <- 1
dbf1[
rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 2
dbf1[
rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 3
# dbf1[rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 4
# dbf1[rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 5
dbf1[
rowSums(dbf1[,codes_nobosq]) > 0.7*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 6
dbf1[
dbf1[,codes_agua] > 0.9*dbf1$total
,]$new_perd <- 7
dbf1$combi <- dbf1$new_perd*10+dbf1$new_class
table(dbf1$combi)
write.table(dbf1[,c("clump_id","total","combi")],paste0(rootdir,"bioko_reclass.txt"),row.names = F,col.names = F)
####### Reclassificar la masquera
system(sprintf("(echo %s; echo 1; echo 1; echo 3; echo 0) | oft-reclass  -oi %s  -um %s %s",
paste0(rootdir,"bioko_reclass.txt"),
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"bioko_clump_mix.tif"),
paste0(rootdir,"bioko_clump_mix.tif")
))
####### Comprimir el resultado
system(sprintf("gdal_calc.py -A %s -B %s --outfile=%s --co=\"COMPRESS=LZW\" --calc=\"%s\"",
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"tmp_bioko_classificacion_clump_gt_50.tif"),
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
"(B>0)*A"
)
)
####### Reproject in Albers
system(sprintf("gdalwarp -t_srs %s -ot Byte -overwrite -co COMPRESS=LZW %s %s",
"albers_equal_area_projection.txt",
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
paste0(rootdir,"aea_bioko_clump_mix_reclass_20170726.tif")
)
)
####### Limpiar la carpeta de los "tmp"
# system(sprintf("rm %s",
#                 "tmp*.tif"))
####### Tiempo de processamiento
Sys.time()-start_time
dbf1$new_perd  <- 0
dbf1[
rowSums(dbf1[,codes_bosque]) > 0.3*dbf1$total
,]$new_perd <- 1
dbf1[
rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 2
dbf1[
rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) > 0
,]$new_perd <- 3
# dbf1[rowSums(dbf1[,codes_bosque]) <= 0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 4
# dbf1[rowSums(dbf1[,codes_bosque]) >  0.3*dbf1$total & rowSums(dbf1[,codes_perd_mg]) > 0,]$new_perd <- 5
dbf1[
rowSums(dbf1[,codes_nobosq]) > 0.7*dbf1$total &
rowSums(dbf1[,codes_perd_bs]) == 0
,]$new_perd <- 6
dbf1[
dbf1[,codes_agua] > 0.9*dbf1$total
,]$new_perd <- 7
dbf1$combi <- dbf1$new_perd*10+dbf1$new_class
table(dbf1$combi)
write.table(dbf1[,c("clump_id","total","combi")],paste0(rootdir,"bioko_reclass.txt"),row.names = F,col.names = F)
####### Reclassificar la masquera
system(sprintf("(echo %s; echo 1; echo 1; echo 3; echo 0) | oft-reclass  -oi %s  -um %s %s",
paste0(rootdir,"bioko_reclass.txt"),
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"bioko_clump_mix.tif"),
paste0(rootdir,"bioko_clump_mix.tif")
))
####### Comprimir el resultado
system(sprintf("gdal_calc.py -A %s -B %s --outfile=%s --co=\"COMPRESS=LZW\" --calc=\"%s\"",
paste0(rootdir,"tmp_bioko_clump_mix_reclass.tif"),
paste0(rootdir,"tmp_bioko_classificacion_clump_gt_50.tif"),
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
"(B>0)*A"
)
)
####### Reproject in Albers
system(sprintf("gdalwarp -t_srs %s -ot Byte -overwrite -co COMPRESS=LZW %s %s",
"albers_equal_area_projection.txt",
paste0(rootdir,"bioko_clump_mix_reclass_20170726.tif"),
paste0(rootdir,"aea_bioko_clump_mix_reclass_20170726.tif")
)
)
####### Limpiar la carpeta de los "tmp"
# system(sprintf("rm %s",
#                 "tmp*.tif"))
####### Tiempo de processamiento
Sys.time()-start_time
setwd("/media/dannunzio/OSDisk/Users/dannunzio/Documents/R/formation_geospatiale/espanol/data/")
getwd()
library(rgdal)
library(rgdal)
library(foreign)
library(raster)
library(rgeos)
library(tmap)
library(dplyr)
library(maps)
install.packages("maps")
library(maps)
df     <- read.dbf("vector/GNQ_contour_geo_buffer005.dbf")
poly_admin <- readOGR(dsn="vector/GNQ_contour_geo_buffer005.shp",
layer="GNQ_contour_geo_buffer005")
summary(poly_admin)
raster <- raster("raster/bioko_uso_suelos.tif")
str(raster)
extent(raster)
# ######### Crear un extracto : "extent" y "crop"
e    <- extent(8.5,8.6,3.2,3.6)
rast <- crop(raster,e)
######### Visualizar un raster : "plot"
plot(rast)
rast <- raster
# ######### Puntos aleatorios sobre un raster: "sampleRandom"
tmp <- sampleRandom(rast,1000,xy=TRUE)
# ######### Convertir en un data frame: "data.frame"
my_sample <- data.frame(tmp)
# ######### Cambiar nombre de columnas
names(my_sample) <- c("x_coord","y_coord","value")
str(my_sample)
# ######### Extraer latitude y longitude
x<-my_sample$x_coord
y<-my_sample$y_coord
# ######### Visualizar puntos: "plot"
plot(x,y)
# ######### Borrar grafico
dev.off()
# ######### Creer un marco vacio
plot(my_sample$x_coord,my_sample$y_coord,
type="n",xlab="longitude",ylab="latitude")
# ######### Visualizar un raster : "rasterImage"
rasterImage(as.raster(rast),xmin(rast),ymin(rast),xmax(rast),ymax(rast))
# ######### Visualizar un raster : "plot"
class <-c(0,1,2,3,4,5)
cols <- c("black","grey","lightgreen","darkgreen","blue","green")
plot(rast,col=cols,breaks=class)
# ######### Anadir puntos en un grafico: "points"
points(my_sample$x_coord,my_sample$y_coord,col="yellow")
# ######### Crear un identificador unico, numero de linea: "row"
my_sample$id <- row(my_sample)[,1]
head(my_sample)
# ######### Operador logico "differente de" :  "!="
list_logic <- my_sample$value != 0
head(list_logic)
# ######### Crear un base de datos
in_country <- my_sample[list_logic,]
points(in_country$x_coord,in_country$y_coord,col="grey")
# ######### Distribucion de valores por puntos : "table"
table(in_country$value)
# ######### Seleccionar un muestreo: "sample"
pts_FP <- my_sample[
sample(my_sample[
my_sample$value==1,]$id,5)
,]
# ######### Anadir puntos en el grafico
points(pts_FP$x_coord,pts_FP$y_coord,col="red",pch=19)
# ######### Convertir pixeles en puntos: "rasterToPoints"
start <- Sys.time()
rast_PP <- rasterToPoints(rast,
fun=function(rast){rast==3})
Sys.time()-start
# ######### Convertir en data.frame
df_pts_PP        <-  as.data.frame(rast_PP)
names(df_pts_PP) <- c("x_coord","y_coord","value")
df_pts_PP$id     <- row(df_pts_PP)[,1]
# ######### Seleccionar 50 puntos de perdidas
pts_PP<-df_pts_PP[sample(df_pts_PP$id,50),]
# ######### Visualizar estos puntos de perdidas
points(pts_PP$x_coord,pts_PP$y_coord,col="red",pch=19)
# ######### Combinar 2 juegos de datos: "rbind"
mes_points <- rbind(pts_FP,pts_PP)
# ######### Verificar distribuccion de puntos por valores
table(mes_points$value)
# ######### Convertir en un formato vector: "SpatialPointsDataFrame"
sp_df<-SpatialPointsDataFrame(
coords = mes_points[,c(1,2)],
data   = data.frame(mes_points[,c(4,3)]),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
# ######### Exportar en KML
writeOGR(obj=sp_df,dsn="mes_points.kml",layer="mes_points",driver = "KML")
writeOGR(obj=sp_df,dsn="mis_points.shp",layer="mis_points",driver = "ESRI Shapefile")
writeOGR(obj=sp_df,dsn="vector/mis_points.shp",layer="mis_points",driver = "ESRI Shapefile")
names(df)[4] <- "algo"
names(df)
names(df)[1] <- "algo"
proj4string(poly_admin)
poly_utm <- spTransform(poly_admin,CRS("+init=epsg:32631"))
my_crs <- projection(poly_utm)
my_ext <- extent(poly_utm)
my_crs
my_ext
extent(poly_admin)
temp   <- raster(poly_utm,resolution=1000,
ext=my_ext,crs=my_crs)
raster <- rasterize(x=poly_utm,y=temp,
field="algo",
background=0,fun='first',
update=TRUE)
raster <- rasterize(x=poly_utm,y=temp,
field="FID",
background=0,fun='first',
update=TRUE)
poly_utm@data$FID <- as.numeric(poly_utm@data$FID)
raster <- rasterize(x=poly_utm,y=temp,
field="FID",
background=0,fun='first',
update=TRUE)
plot(raster)
plot(poly_utm,add=TRUE)
plot(point_utm,add=T)
mon_poly <-poly_utm[poly_utm$FID=="1",]
mon_poly
plot(mon_poly,add=T,col="blue")
continente <-poly_utm[poly_utm$FID == 2,]
plot(continente,add=T,col="red")
union <- gUnion(continente,mon_poly)
plot(union)
point_admin <- readOGR(dsn="vector/mis_points.shp",
layer="mis_points")
points_utm <- spTransform(point_admin,CRS("+init=epsg:32631"))
pts_cont <- point_utm[continente,]
pts_cont <- points_utm[continente,]
plot(pts_cont)
bioko
bioko <-poly_utm[poly_utm$FID=="1",]
bioko
union <- gUnion(continente,bioko)
plot(union)
pts_cont <- points_utm[bioko,]
plot(pts_cont)
plot(pts_bioko)
pts_bioko <- points_utm[bioko,]
plot(pts_bioko)
poly_utm_ifn <- aggregate(x = points_utm["id"],by = poly_utm,FUN = length)
poly_utm$IFN_pts <- poly_utm_ifn$id
poly_utm@data
poly_utm$IFN_pts <- poly_utm_ifn@data$id
poly_utm@data
points_utm$DPT <- aggregate(x = poly_utm["FID"], by = points_utm,FUN=first)$FID
head(point_utm)
head(points_utm)
table(points_utm$DPT)
tmp <- sampleRegular(poly_utm,10000,xy=TRUE)
?sampleRegular
tmp <- sampleRegular(raster,10000,xy=TRUE)
tmp <- as.data.frame(sampleRegular(raster,10000,xy=TRUE))
sp_df<-SpatialPointsDataFrame(
coords = tmp[,c(1,2)],
data   = data.frame(tmp[,c(3)]),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
names(sp_df)
sp_df<-SpatialPointsDataFrame(
coords = tmp[,c(1,2)],
data   = data.frame(tmp),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
names(sp_df) <- c("x_coord","y_coord","val")
table(sp_df$val)
tmp <- as.data.frame(sampleRegular(raster,100000,xy=TRUE))
sp_df<-SpatialPointsDataFrame(
coords = tmp[,c(1,2)],
data   = data.frame(tmp),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
names(sp_df) <- c("x_coord","y_coord","val")
table(sp_df$val)
poly_utm_ifn <- aggregate(x = points_utm["id"],by = poly_utm,FUN = length)
points_utm <-SpatialPointsDataFrame(
coords = tmp[,c(1,2)],
data   = data.frame(tmp),
proj4string=CRS("+proj=longlat +datum=WGS84")
)
names(points_utm) <- c("x_coord","y_coord","val")
table(points_utm$val)
poly_utm_ifn <- aggregate(x = points_utm["id"],by = poly_utm,FUN = length)
points_utm@data$id <- row(points_utm)[,1]
poly_utm_ifn <- aggregate(x = points_utm["id"],by = poly_utm,FUN = length)
proj4string(points_utm)
points_utm <-SpatialPointsDataFrame(
coords = tmp[,c(1,2)],
data   = data.frame(tmp),
proj4string=CRS("+init=epsg:32631")
)
names(points_utm) <- c("x_coord","y_coord","val")
table(points_utm$val)
points_utm@data$id <- row(points_utm)[,1]
poly_utm_ifn <- aggregate(x = points_utm["id"],by = poly_utm,FUN = length)
poly_utm$IFN_pts <- poly_utm_ifn@data$id
poly_utm@data
writeOGR(obj=points_utm,dsn="vector/puntos_systematicos.shp",layer="puntos_systematicos",driver = "ESRI Shapefile")
library(rgdal)
library(foreign)
library(raster)
library(rgeos)
library(tmap)
library(dplyr)
library(maps)
install.packages("tmap")
raster <- raster("raster/bioko_uso_suelos.tif")
poly   <- readOGR(dsn="vector/GNQ_contour_geo_buffer005.shp",
layer="GNQ_contour_geo_buffer005")
points <- readOGR(dsn="vector/puntos_systematicos.shp",
layer="puntos_systematicos")
table  <- read.csv("tablas/BIOKO_collectedData_earthaa_bioko_CE_2017_04_02_on_070417_114427_CSV.csv")
gfc_tc <- raster("raster/bioko_gfc_clean_nd.tif")
plot(table$map_class)
res(gfc_tc)*111000
res(gfc_tc)*111320
projection(gfc_tc)
table$uso_suelo <- extract(raster,table[,c(1:2)])
table$uso_suelo <- extract(raster,table[,c("location_x","location_y")])
head(table,2)
head(table)
values(gfc_tc)
table(gfc_tc)
unique(gfc_tc)
rcl <- data.frame(cbind(unique(gfc_tc),
c(0,1,1,1,1,2,2,2,2,rep(20,11),rep(30,11),rep(40,11)rep(50,4))
)
)
rcl <- data.frame(cbind(unique(gfc_tc),
c(0,1,1,1,1,2,2,2,2,rep(20,11),rep(30,11),rep(40,11),rep(50,4))
)
)
rep(20,11)
c(0,1,1,1,1,2,2,2,2,rep(20,11),rep(30,11),rep(40,11),rep(50,4))
rcl <- data.frame(cbind(unique(gfc_tc),
c(0,1,1,1,1,2,2,2,2,rep(20,11),rep(30,11),rep(40,12),rep(50,4))
)
)
unique(gfc_tc)
rcl <- data.frame(cbind(unique(gfc_tc),
c(0,1,1,1,1,2,2,2,2,rep(20,11),rep(30,11),rep(40,12),rep(50,5))
)
)
reclass <- reclassify(gfc_tc,rcl)
writeRaster(reclass,"reclass.tif")
writeRaster(reclass,"raster/reclass.tif")
bioko <- poly[poly$FID == 1,]
ext <- as.data.frame(extract(reclass,bioko,method="simple"))
agg<-aggregate(reclass,fact=10,fun=max)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
table(ext)
list<-levels(as.factor(poly$FID))
(list <- levels(as.factor(poly$FID)))
mi_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$FID == dpt,]
)
)
)
}
mi_zonal(2,agg)
(list <- levels(unique(poly$FID)))
(list <- unique(poly$FID))
mi_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$FID == dpt,]
)
)
)
}
mi_zonal(2,agg)
mi_zonal(1,agg)
mi_zonal(2,agg)
mi_zonal(3,agg)
plot(agg)
poly   <- readOGR(dsn="vector/gaul_livel1.shp",
layer="gaul_livel1")
(list <- unique(poly$ADM1_NAME))
(list <- unique(poly$ADM2_NAME))
bioko <- poly[poly$ADM1_NAME == "Bioko",]
agg<-aggregate(reclass,fact=10,fun=max)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
bioko <- poly[ "Bioko" %in% poly$ADM1_NAME,]
agg<-aggregate(reclass,fact=10,fun=max)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
plot(bioko)
bioko <- poly[poly$ADM1_NAME %in% grep("bioko",poly$ADM1_NAME),]
plot(bioko)
grep("bioko",poly$ADM1_NAME)
grep("Bioko",poly$ADM1_NAME)
bioko <- poly[grep("Bioko",poly$ADM1_NAME),]
plot(bioko)
agg<-aggregate(reclass,fact=10,fun=max)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
proj4string(bioko)
proj4string(agg)
plot(agg,add=T)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
extent(agg)
summary(agg)
bioko <- poly[grep("Bioko",poly$ADM1_NAME),]
bioko <- poly[grep("Bioko Sur",poly$ADM1_NAME),]
agg <- aggregate(reclass,fact=10,fun=max)
ext <- as.data.frame(extract(agg,bioko,method="simple"))
table(ext)
(list <- unique(poly$ADM1_NAME))
mi_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$FID == dpt,]
)
)
)
}
mi_zonal("Bioko Norte",agg)
list
mi_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$ADM1_NAME == dpt,]
)
)
)
}
mi_zonal("Bioko Norte",agg)
sapply(list,function(x){mi_zonal(x,agg)})
list
mi_zonal("Annobon",agg)
mi_zonal("Litoral",agg)
(list <- grep("Bioko",poly$ADM1_NAME))
(list <- poly$ADM1_NAME[grep("Bioko",poly$ADM1_NAME)])
mi_zonal <- function(dpt,raster){
table(data.frame(
extract(raster,
poly[poly$ADM1_NAME == dpt,]
)
)
)
}
sapply(list,function(x){mi_zonal(x,agg)})
